library IEEE;
use IEEE.std_logic_1164.all;

-- Testbench for the counter. 
entity BCD_Counter_test is 
end entity BCD_Counter_test; 
architecture my_test of BCD_Counter_test is     
signal t_clk, t_direction, t_init, t_enable : std_logic;
signal t_Q : std_logic_vector(3 downto 0);
     
component BCD_Counter is
    port (Clk, Direction, Init, Enable : in std_logic;
	     Q : out std_logic_vector(3 downto 0));
end component; begin

DUT: BCD_Counter port map (t_clk, t_direction, t_init, t_enable, t_Q);
-- Initialization process (code that executes only once).
init: process      
begin
	-- reset pulse        
	t_init <= '1', '0' after 70 ns, '1' after 200 ns, '0' after 205 ns, '1' after 405 ns, '0' after 485 ns, '1' after 1035 ns, '0' after 1065 ns;
	t_direction <= '0', '1' after 360 ns, '0' after 600 ns, '1' after 700 ns;
	t_enable <= '1', '0' after 85 ns, '1' after 100 ns, '0' after 400 ns, '1' after 500 ns;
	wait;
end process init;
-- clock generation
clk_gen: process
begin
	wait for 5 ns;
    t_clk <= '0';
    wait for 5 ns;
    t_clk <= '1';
end process clk_gen;
end architecture my_test;